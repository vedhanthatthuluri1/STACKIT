rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users Collection
    // - Any authenticated user can read/list user profiles.
    // - Only the user themselves can update or delete their profile.
    // - Anyone can create a user document (during registration).
    match /users/{userId} {
      allow get, list: if isAuth();
      allow create; 
      allow update, delete: if isOwner(userId);

      // Votes subcollection
      match /votes/{voteId} {
        allow read, write: if isAuth();
      }
    }

    // Questions Collection
    // - Anyone can read/list questions.
    // - Only authenticated users can create questions.
    // - Only the author can update or delete their own question.
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isAuth();
      allow update, delete: if isAuth() && isOwner(resource.data.authorId);

      // Answers Subcollection
      match /answers/{answerId} {
        allow get, list: if true;
        allow create, update: if isAuth();
        allow delete: if isAuth() && (isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId));
      }
    }

    // Notifications Collection
    // - A user can only access their own notifications.
    match /notifications/{notificationId} {
        allow get: if isAuth() && isOwner(resource.data.recipientId);
        allow list: if isAuth() && request.query.where.recipientId == request.auth.uid;
        allow create, update: if isAuth();
    }
  }
}
