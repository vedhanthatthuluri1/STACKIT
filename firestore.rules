
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Questions Collection
    match /questions/{questionId} {
      // Anyone can read questions and question lists
      allow read: if true;

      // Only authenticated users can create questions
      allow create: if isOwner(request.resource.data.authorId);

      // Only the author can update their question
      allow update: if isOwner(resource.data.authorId) && request.resource.data.authorId == resource.data.authorId;

      // Only the author can delete their question
      allow delete: if isOwner(resource.data.authorId);

      // Answers Subcollection
      match /answers/{answerId} {
        // Anyone can read answers
        allow read: if true;

        // Authenticated users can create answers
        allow create: if isOwner(request.resource.data.authorId);

        // Author can update their own answer
        // Question author can also update (e.g., to mark as accepted)
        allow update: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId);

        // Answer author or question author can delete
        allow delete: if isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId);
      }
    }

    // Users Collection
    match /users/{userId} {
      // Any authenticated user can view profiles and list users
      allow get, list: if request.auth.uid != null;
      
      // A user can only create their own document
      allow create: if isOwner(userId);
      
      // A user can only update their own document
      allow update: if isOwner(userId);
    }
    
    // Votes Subcollection within Users
    match /users/{userId}/votes/{voteId} {
        // A user can only manage their own votes
        allow read, write: if isOwner(userId);
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      // Users can only read notifications sent to them
      allow get: if isOwner(resource.data.recipientId);
      allow list: if isOwner(request.query.where.recipientId);

      // Only the system (backend/cloud function) or a user sending a message can create a notification
      allow create: if isOwner(request.resource.data.senderId);
    }
  }
}
