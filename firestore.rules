rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow get, list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
    }

    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid != null && isOwner(resource.data.authorId);
      allow delete: if request.auth.uid != null && isOwner(resource.data.authorId);
    }

    match /questions/{questionId}/answers/{answerId} {
      allow read, list: if true;
      allow create: if request.auth.uid != null;
      // Allow update by answer author (for editing) or question author (for accepting)
      allow update: if request.auth.uid != null && (isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId));
      // Allow delete by answer author OR if the parent question is being deleted.
      allow delete: if request.auth.uid != null && (isOwner(resource.data.authorId) || !exists(/databases/$(database)/documents/questions/$(questionId)));
    }

    match /users/{userId}/votes/{voteId} {
      allow read, create, delete: if isOwner(userId);
    }
    
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.recipientId);
      allow create: if request.auth.uid != null;
    }
  }
}
