rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
    }
    
    match /questions/{questionId} {
      allow read: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);
      
      match /answers/{answerId} {
        allow read: if true;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isOwner(resource.data.authorId);
        allow delete: if 
          isOwner(resource.data.authorId) || 
          isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId);
      }
    }

    match /notifications/{notificationId} {
       allow read, write: if isOwner(resource.data.recipientId);
    }

    // This collection stores user votes to prevent duplicate voting
    match /users/{userId}/votes/{contentId} {
      allow read, write: if isOwner(userId);
    }
  }
}
