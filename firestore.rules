
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Publicly readable for profiles, but only the user can write to their own doc.
    match /users/{userId} {
      allow read;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User Votes: Only the user can access their own votes subcollection.
    match /users/{userId}/votes/{voteId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Questions: Allow reads for everyone.
    // Writes (create, update, delete) are restricted.
    match /questions/{questionId} {
      allow read;
      // Allow create if user is logged in
      allow create: if request.auth != null;
      // Allow updates for specific fields like votes and answersCount if logged in
      allow update: if request.auth != null && 
                      (
                        (request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['votes', 'views'])) ||
                        (request.resource.data.answersCount == resource.data.answersCount + 1)
                      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;

      // Answers Subcollection
      match /answers/{answerId} {
        allow read;
        // Allow user to create an answer
        allow create: if request.auth != null;
        // Allow author to update their answer
        allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
        // Allow author to delete their answer
        allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
      }
    }
    
    // Notifications: Users can only read their own notifications.
    // Creation is handled by backend logic (triggered by answering a question).
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.recipientId;
      allow create: if request.auth != null; // Server-side creation is authenticated
      allow delete: if request.auth != null && request.auth.uid == resource.data.recipientId;
    }
  }
}
