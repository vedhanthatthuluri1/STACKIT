
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAnswerOwner() {
      return isOwner(resource.data.authorId);
    }

    function isQuestionOwner(questionId) {
      let question = get(/databases/$(database)/documents/questions/$(questionId));
      return question != null && isOwner(question.data.authorId);
    }
    
    // Users Collection
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get, list: if request.auth != null;
      allow update: if isOwner(userId);

      // User Votes Subcollection
      match /votes/{contentId} {
        allow read, create, delete: if request.auth != null;
      }
    }

    // Questions Collection
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if request.auth != null && isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);

      // Answers Subcollection
      match /answers/{answerId} {
        allow get, list: if true;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if isAnswerOwner() || isQuestionOwner(questionId); // Allow question owner to accept answer
        allow delete: if isAnswerOwner();
      }
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
        allow read: if isOwner(resource.data.recipientId);
        allow create: if request.auth != null;
    }
  }
}
