rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow update: if isOwner(userId);
    }

    match /questions/{questionId} {
      allow read: if true;
      allow create: if request.auth != null && isOwner(request.resource.data.authorId);
      allow update: if request.auth != null && isOwner(resource.data.authorId);
      allow delete: if request.auth != null && isOwner(resource.data.authorId);

      match /answers/{answerId} {
        allow read: if true;
        allow create: if request.auth != null && isOwner(request.resource.data.authorId);
        allow update: if request.auth != null && isOwner(resource.data.authorId);
        allow delete: if request.auth != null && (isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId));
      }
    }

    match /notifications/{notificationId} {
        allow read: if isOwner(resource.data.recipientId);
        allow create: if request.auth != null;
    }

    // users/{userId}/votes/{contentId}
    match /users/{userId}/votes/{contentId} {
        allow read, write: if isOwner(userId);
    }
  }
}
