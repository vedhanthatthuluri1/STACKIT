rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users can only be created during signup.
    // User profiles are public to authenticated users, but a user can only edit their own profile.
    match /users/{userId} {
      allow get, list: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      // No one can delete user profiles for now.
      allow delete: if false;
    }

    // Questions are public. 
    // Only authenticated users can create them.
    // Only the author can update or delete their own question.
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isOwner(request.resource.data.authorId);
      allow update: if isOwner(resource.data.authorId);
      allow delete: if isOwner(resource.data.authorId);

      // Answers are public.
      // Only authenticated users can create them.
      // The author of the answer can update/delete it.
      // The author of the question can mark an answer as accepted.
      match /answers/{answerId} {
        allow get, list: if true;
        allow create: if isOwner(request.resource.data.authorId);
        allow update: if 
          isOwner(resource.data.authorId) || 
          isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId);
        allow delete: if isOwner(resource.data.authorId);
      }
    }

    // A user can only manage their own votes.
    match /users/{userId}/votes/{voteId} {
        allow read, write: if isOwner(userId);
    }

    // A user can only read notifications intended for them.
    // Creating a notification is handled by the create answer logic.
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.recipientId);
      allow create: if request.auth != null;
    }
  }
}