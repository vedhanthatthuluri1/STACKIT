rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is the owner of a document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // USERS
    // Allow users to create their own user document upon registration.
    // Allow authenticated users to read any profile.
    // Allow users to only update their own profile.
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get, list: if request.auth != null;
      allow update: if isOwner(userId);
    }

    // QUESTIONS
    // Allow anyone to read questions.
    // Allow authenticated users to create questions for themselves.
    // Allow the author to update or delete their own question.
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if request.auth != null && isOwner(request.resource.data.authorId);
      allow update: if request.auth != null && isOwner(resource.data.authorId);
      allow delete: if request.auth != null && isOwner(resource.data.authorId);

      // ANSWERS (Subcollection)
      // Allow anyone to read answers for a question.
      // Allow authenticated users to create answers.
      // Allow the answer's author to update their own answer.
      // Allow the question's author to update any answer (e.g., to mark as accepted).
      // Allow the answer's author OR the question's author to delete an answer.
      match /answers/{answerId} {
        allow get, list: if true;
        allow create: if request.auth != null && isOwner(request.resource.data.authorId);
        allow update: if request.auth != null && (isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId));
        allow delete: if request.auth != null && (isOwner(resource.data.authorId) || isOwner(get(/databases/$(database)/documents/questions/$(questionId)).data.authorId));
      }
    }
    
    // ANSWERS (Collection Group)
    // This rule is necessary for the profile page to query a user's answers
    // across all questions. It allows a read-only list operation.
    match /{path=**}/answers/{answerId} {
      allow list: if request.auth != null;
    }

    // USER VOTES
    // Users can only create, read, or delete votes under their own user document.
    match /users/{userId}/votes/{voteId} {
        allow read, write, delete: if isOwner(userId);
    }
    
    // NOTIFICATIONS
    // Users can only read or update their own notifications.
    // Any authenticated user can create a notification (e.g., by answering a question).
    // The recipient or the question author can delete a notification.
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.recipientId);
        allow create: if request.auth != null;
        allow delete: if request.auth != null && (isOwner(resource.data.recipientId) || isOwner(get(/databases/$(database)/documents/questions/$(resource.data.questionId)).data.authorId));
    }
  }
}
