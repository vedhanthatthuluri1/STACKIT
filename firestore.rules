
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document by authorId
    function isResourceOwner() {
      return request.auth.uid == resource.data.authorId;
    }

    // Questions
    match /questions/{questionId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthenticated() && isResourceOwner();

      // Answers
      match /answers/{answerId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isResourceOwner();
        // Allow delete if user is answer owner OR question owner
        allow delete: if isAuthenticated() && (isResourceOwner() || request.auth.uid == get(/databases/$(database)/documents/questions/$(questionId)).data.authorId);
      }
    }

    // Users
    match /users/{userId} {
      // Any authenticated user can view profiles and list users
      allow get, list: if isAuthenticated();
      // Users can only create and update their own profile
      allow create: if request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Notifications
    match /notifications/{notificationId} {
      // Users can only read/write their own notifications
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.recipientId;
    }

    // Votes
    match /users/{userId}/votes/{contentId} {
      // Users can only manage their own votes
       allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
  }
}
