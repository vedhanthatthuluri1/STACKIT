rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isQuestionAuthor(questionId) {
      return request.auth.uid == get(/databases/$(database)/documents/questions/$(questionId)).data.authorId;
    }

    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow get, list: if request.auth != null;
      allow update: if request.auth != null && isOwner(userId);
    }

    match /questions/{questionId} {
      allow read: if true;
      allow create: if request.auth != null && isOwner(request.resource.data.authorId);
      allow update: if request.auth != null && isOwner(resource.data.authorId);
      allow delete: if request.auth != null && isOwner(resource.data.authorId);

      match /answers/{answerId} {
        allow read: if true;
        allow create: if request.auth != null && isOwner(request.resource.data.authorId);
        allow update: if request.auth != null && (isOwner(resource.data.authorId) || isQuestionAuthor(questionId));
        allow delete: if request.auth != null && (isOwner(resource.data.authorId) || isQuestionAuthor(questionId));
      }
    }

    match /users/{userId}/votes/{voteId} {
        allow read, write, delete: if isOwner(userId);
    }

    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.recipientId;
        allow create: if request.auth != null;
        allow delete: if request.auth.uid == resource.data.recipientId || isQuestionAuthor(resource.data.questionId);
    }
  }
}