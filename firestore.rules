rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can read their own user doc, admin can read any. No one can write/delete through client.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create; // Allow user creation during sign-up
      allow write, delete: if false;
    }

    // Questions: Logged-in users can create. Author or admin can update/delete. Anyone can read.
    match /questions/{questionId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow updating answersCount by any authenticated user
      allow update: if request.auth.uid == resource.data.authorId 
                    || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
                    || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['answersCount']) && request.auth != null);
      allow delete: if request.auth.uid == resource.data.authorId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Answers: Logged-in can create. Author can update/delete.
      match /answers/{answerId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.authorId;
      }
    }

    // Notifications: Users can only read notifications intended for them.
    match /notifications/{notificationId} {
      allow get: if request.auth.uid == resource.data.recipientId;
      allow list: if request.auth.uid == request.query.where.recipientId;
      allow create: if request.auth != null;
      allow update(writeFields: ['read']): if request.auth.uid == resource.data.recipientId;
    }

    // Votes: User can only manage their own votes.
    match /users/{userId}/votes/{voteId} {
        allow read, write, delete: if request.auth.uid == userId;
    }
  }
}
